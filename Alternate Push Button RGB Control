/*
 * Program Name: Push Button Controlled RGB
 * Goal:
 *   This program uses a push button to control an RGB LED. When the button is not pressed, 
 *   the RGB LED will display white (all colors ON). When the button is pressed, the RGB LED will turn OFF.
 * 
 * Main Theme:
 *   The program demonstrates how to use a push button to control the color of an RGB LED using an Arduino.
 *   The state of the button determines whether the LED displays white or is turned off.
 * 
 * Hardware Connections:
 *   - Push button connected between pin 7 and GND.
 *   - RGB LED connected to pins 9 (Red), 10 (Green), 11 (Blue) with 220Î© resistors.
 */

const int redPin = 9;    // Pin for Red color (PWM)
const int greenPin = 10; // Pin for Green color (PWM)
const int bluePin = 11;  // Pin for Blue color (PWM)
const int buttonPin = 7; // Pin for push button (Digital Input)

void setup() {
  // Set RGB LED pins as OUTPUT
  pinMode(redPin, OUTPUT);
  pinMode(greenPin, OUTPUT);
  pinMode(bluePin, OUTPUT);

  // Set the push button pin as INPUT with internal pull-up resistor
  pinMode(buttonPin, INPUT_PULLUP);

  // Start the serial monitor for debugging (optional)
  Serial.begin(9600);
}

void loop() {
  // Read the state of the push button (LOW when pressed, HIGH when not pressed)
  int buttonState = digitalRead(buttonPin);

  if (buttonState == HIGH) { // If button is NOT pressed (state HIGH)
    // Turn the RGB LED to white (Red, Green, Blue all ON)
    analogWrite(redPin, 255);   // Max brightness for Red
    analogWrite(greenPin, 255); // Max brightness for Green
    analogWrite(bluePin, 255);  // Max brightness for Blue
    
    // Debugging output to Serial Monitor
    Serial.println("RGB LED: White (Button Not Pressed)");
  } 
  else { // If button is pressed (state LOW)
    // Turn off the RGB LED
    analogWrite(redPin, 0);   // Red OFF
    analogWrite(greenPin, 0); // Green OFF
    analogWrite(bluePin, 0);  // Blue OFF
    
    // Debugging output to Serial Monitor
    Serial.println("RGB LED: Off (Button Pressed)");
  }

  delay(100); // Delay to avoid bouncing effect and for better readability
}
